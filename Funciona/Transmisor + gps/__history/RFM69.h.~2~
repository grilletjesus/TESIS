#include <RFM69registers.h>

#define RF69_MAX_DATA_LEN       61 
int CSMA_LIMIT = -90; // upper RX signal sensitivity threshold in dBm for carrier sense access
#define RF69_MODE_SLEEP         0 // XTAL OFF
#define RF69_MODE_STANDBY       1 // XTAL ON
#define RF69_MODE_SYNTH         2 // PLL ON
#define RF69_MODE_RX            3 // RX MODE
#define RF69_MODE_TX            4 // TX MODE

// available frequency bands
#define RF69_315MHZ            31 // non trivial values to avoid misconfiguration
#define RF69_433MHZ            43
#define RF69_868MHZ            86
#define RF69_915MHZ            91

#define COURSE_TEMP_COEF    -90 // puts the temperature reading in the ballpark, user can fine tune the returned value
#define RF69_BROADCAST_ADDR 255
#define RF69_CSMA_LIMIT_MS 1000
#define RF69_TX_LIMIT_MS   1000
#define RF69_FSTEP  61.03515625 // == FXOSC / 2^19 = 32MHz / 2^19 (p13 in datasheet)

// TWS: define CTLbyte bits
#define RFM69_CTL_SENDACK   0x80
#define RFM69_CTL_REQACK    0x40

   // static volatile int DATA[RF69_MAX_DATA_LEN]; // recv/xmit buf, including header & crc bytes
    //static volatile int DATALEN;
    //static volatile int SENDERID;
    //static volatile int TARGETID; // should match _address
    static volatile int PAYLOADLEN;
    //static volatile int ACK_REQUESTED;
    //static volatile int ACK_RECEIVED; // should be polled immediately after sending a packet with ACK request
    static volatile int16 RSSI; // most accurate RSSI during reception (closest to the reception)
    static volatile int _mode, _address;// should be protected?
    short  _isRFM69HW=1;
    //short  _promiscuousMode = 0;
    int    _powerLevel = 31;

    byte SPIRead8bit(void);
    byte SPItransfer(byte WrPara);
    int32 millis();
    short initialize(int8 ID);
    short canSend();
    void send(int toAddress,byte* buffer, int bufferSize, short requestACK=false);
    short sendWithRetry(int toAddress, byte* buffer, int bufferSize, int retries=2, int retryWaitTime=40); // 40ms roundtrip req for 61byte packets
    short receiveDone();
    short ACKReceived(int fromNodeID);
    short ACKRequested();
    void sendACK(byte* buffer , int bufferSize);

    // allow hacking registers by making these public
    int readReg(int addr);
    void writeReg(int8 addr, int8 val);
    void readAllRegs();
    
    //static volatile short _inISR;
    void sendFrame(int8 toAddress, byte *buffer, int size, short requestACK=false,short sendACK=false);

    void setMode(int mode);
    void select();
    void unselect();
    int16 readRSSI(short forceTrigger);
    void setHighPower(short onOff);
    void setHighPowerRegs(short onOff);

short initialize( int nodeID)
{
   const int networkID = 1;

  const int8 CONFIG[][2] =
  {
    /* 0x01 */ { REG_OPMODE, RF_OPMODE_SEQUENCER_ON | RF_OPMODE_LISTEN_OFF | RF_OPMODE_STANDBY },
    /* 0x02 */ { REG_DATAMODUL, RF_DATAMODUL_DATAMODE_PACKET | RF_DATAMODUL_MODULATIONTYPE_FSK | RF_DATAMODUL_MODULATIONSHAPING_00 }, // no shaping
    /* 0x03 */ { REG_BITRATEMSB, RF_BITRATEMSB_55555}, // default: 4.8 KBPS
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, RF_FRFMSB_915 },
    /* 0x08 */ { REG_FRFMID, RF_FRFMID_915 },
    /* 0x09 */ { REG_FRFLSB, RF_FRFLSB_915 },

    // looks like PA1 and PA2 are not implemented on RFM69W, hence the max output power is 13dBm
    // +17dBm and +20dBm are possible on RFM69HW
    // +13dBm formula: Pout = -18 + OutputPower (with PA0 or PA1**)
    // +17dBm formula: Pout = -14 + OutputPower (with PA1 and PA2)**
    // +20dBm formula: Pout = -11 + OutputPower (with PA1 and PA2)** and high power PA settings (section 3.3.7 in datasheet)
    ///* 0x11 */ { REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | RF_PALEVEL_OUTPUTPOWER_11111},
    ///* 0x13 */ { REG_OCP, RF_OCP_ON | RF_OCP_TRIM_95 }, // over current protection (default is 95mA)

    // RXBW defaults are { REG_RXBW, RF_RXBW_DCCFREQ_010 | RF_RXBW_MANT_24 | RF_RXBW_EXP_5} (RxBw: 10.4KHz)
    /* 0x19 */ { REG_RXBW, RF_RXBW_DCCFREQ_010 | RF_RXBW_MANT_16 | RF_RXBW_EXP_2 }, // (BitRate < 2 * RxBw)
    //for BR-19200: /* 0x19 */ { REG_RXBW, RF_RXBW_DCCFREQ_010 | RF_RXBW_MANT_24 | RF_RXBW_EXP_3 },
    /* 0x25 */ { REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01 }, // DIO0 is the only IRQ we're using
    /* 0x26 */ { REG_DIOMAPPING2, RF_DIOMAPPING2_CLKOUT_OFF }, // DIO5 ClkOut disable for power saving
    /* 0x28 */ { REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN }, // writing to this bit ensures that the FIFO & status flags are reset
    /* 0x29 */ { REG_RSSITHRESH, 220 }, // must be set to dBm = (-Sensitivity / 2), default is 0xE4 = 228 so -114dBm
    /* 0x2D */ { REG_PREAMBLELSB, RF_PREAMBLESIZE_LSB_VALUE }, // default 3 preamble bytes 0xAAAAAA
    /* 0x2E */ { REG_SYNCCONFIG, RF_SYNC_ON | RF_SYNC_FIFOFILL_AUTO | RF_SYNC_SIZE_2 | RF_SYNC_TOL_0 },
    /* 0x2F */ { REG_SYNCVALUE1, 0x2D },      // attempt to make this compatible with sync1 byte of RFM12B lib
    /* 0x30 */ { REG_SYNCVALUE2, networkID}, // NETWORK ID
    /* 0x37 */ { REG_PACKETCONFIG1, RF_PACKET1_FORMAT_VARIABLE | RF_PACKET1_DCFREE_OFF | RF_PACKET1_CRC_ON | RF_PACKET1_CRCAUTOCLEAR_ON | RF_PACKET1_ADRSFILTERING_OFF },
    /* 0x38 */ { REG_PAYLOADLENGTH, 66 }, // in variable length mode: the max frame size, not used in TX
    ///* 0x39 */ { REG_NODEADRS, nodeID }, // turned off because we're not using address filtering
    /* 0x3C */ { REG_FIFOTHRESH, RF_FIFOTHRESH_TXSTART_FIFONOTEMPTY | RF_FIFOTHRESH_VALUE }, // TX on FIFO not empty
    /* 0x3D */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, // RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: /* 0x3D */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, // RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode for Fading Margin Improvement, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   
  // printf("sincronizando");
  output_high(_slaveSelectPin);
  int32 start = millis();
  int timeout = 50;
  do writeReg(REG_SYNCVALUE1, 0xAA); while (readReg(REG_SYNCVALUE1) != 0xaa && millis()-start < timeout);
  //printf("sincronizado1");
  start = millis();
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start < timeout);
  //printf("sincronizado2");
  
  for (int i = 0; CONFIG[i][0] != 255; i++)
    writeReg(CONFIG[i][0], CONFIG[i][1]);

   
  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  
  setHighPower(_isRFM69HW); // called regardless if it's a RFM69W or RFM69HW
  setMode(RF69_MODE_STANDBY);
  start = millis();
  while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis()-start < timeout); // wait for ModeReady
  if (millis()-start >= timeout)
    return false;
  
  //_inISR = false;
    //ext_int_edge(L_TO_H);
   //Enable_interrupts(INT_EXT);

 //printf("configurado");
  _address = nodeID;
  return true;
}


void setMode(int newMode)
{
  
   if (newMode == _mode)
    return;

  switch (newMode) {
    case RF69_MODE_TX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
      if (_isRFM69HW) setHighPowerRegs(true);
      break;
    case RF69_MODE_RX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
      if (_isRFM69HW) setHighPowerRegs(false);
      break;
    case RF69_MODE_SYNTH:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
      break;
    case RF69_MODE_STANDBY:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
      break;
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
      break;
    default:
      return;
  }

  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady

  _mode = newMode;
}

short canSend()
{
if ((_mode == RF69_MODE_RX) && (PAYLOADLEN == 0) && (readRSSI(1) < CSMA_LIMIT)) // if signal stronger than -100dBm is detected assume channel activity
  {
    setMode(RF69_MODE_STANDBY);
    return true;
  }
  return false;
}

void send(int toAddress, byte * buffer, int bufferSize, short requestACK)
{
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
  int32 now = millis();
  while (!canSend() && millis() - now < RF69_CSMA_LIMIT_MS);
  sendFrame(toAddress, buffer, bufferSize, requestACK, false);
}

// to increase the chance of getting a packet across, call this function instead of send
// and it handles all the ACK requesting/retrying for you :)
// The only twist is that you have to manually listen to ACK requests on the other side and send back the ACKs
// The reason for the semi-automaton is that the lib is interrupt driven and
// requires user action to read the received data and decide what to do with it
// replies usually take only 5..8ms at 50kbps@915MHz
short sendWithRetry(int toAddress, byte *buffer, int bufferSize, int retries, int retryWaitTime) {
  int32 sentTime;
  for (int i = 0; i <= retries; i++)
  {
    send(toAddress, buffer, bufferSize, true);
    sentTime = millis();
    while (millis() - sentTime < retryWaitTime);
   
  }
  return false;
}


// internal function
void sendFrame(int toAddress, byte *buffer, int bufferSize, short requestACK, short sendACK)
{
  setMode(RF69_MODE_STANDBY); // turn off receiver to prevent reception while filling fifo
  while ((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_00); // DIO0 is "Packet Sent"
  if (bufferSize > RF69_MAX_DATA_LEN) bufferSize = RF69_MAX_DATA_LEN;

  // control byte
  byte CTLbyte = 0x00;
  if (sendACK)
    CTLbyte = RFM69_CTL_SENDACK;
  else if (requestACK)
    CTLbyte = RFM69_CTL_REQACK;

  // write to FIFO
  select();
  SPItransfer(REG_FIFO | 0x80);
  SPItransfer(bufferSize + 3);
  SPItransfer(toAddress);
  SPItransfer(_address);
  SPItransfer(CTLbyte);

  for (int i = 0; i < bufferSize; i++)
    SPItransfer(((byte *) buffer)[i]);
  unselect();

  // no need to wait for transmit mode to be ready since its handled by the radio
  setMode(RF69_MODE_TX);
  int32 txStart = millis();
  while ( input(_interruptPin) == 0 && millis() - txStart < RF69_TX_LIMIT_MS); // wait for DIO0 to turn HIGH signalling transmission finish
  while (readReg(REG_IRQFLAGS2) & (RF_IRQFLAGS2_PACKETSENT == 0x00)); // wait for ModeReady
  setMode(RF69_MODE_STANDBY);
}




int32 millis()
{
   return get_ticks();
}

int readReg(int addr)
{
  select();
  SPItransfer(addr & 0x7F);
  int regval = SPIRead8bit();
  unselect();
  return regval;
}

void writeReg(int addr, int value)
{
  select();
  SPItransfer(addr | 0x80);
  SPItransfer(value);
  unselect();
}

void select() {
  output_low(_slaveSelectPin);
}

// unselect the RFM69 transceiver (set CS high, restore SPI settings)
void unselect() {
  output_high(_slaveSelectPin);
}


// for RFM69HW only: you must call setHighPower(true) after initialize() or else transmission won't work
void setHighPower(short onOff) {
  _isRFM69HW = onOff;
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
  if (_isRFM69HW) // turning ON
    writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
  else
    writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); // enable P0 only
   //printf("HighPower");
}



void readAllRegs()
{
  int regVal;
 
  //... State Variables for intelligent decoding
  
  //printf("Address - HEX - BIN \n");
  for (int regAddr = 1; regAddr <= 0x4F; regAddr++)
  {
    select();
    SPItransfer(regAddr & 0x7F); // send address + r/w bit
    regVal = SPIRead8bit();
    unselect();

    //printf("%X", regAddr);
    //printf(" - ");
    //printf("%X", regVal);
    //printf(" - ");
    for (byte i = 8; i!=0 ; i--)
      {
      if(bit_test(regVal, (i-1))) 
         //printf("1"); 
      else 
         //printf("0"); 
      }
     //printf("\n");
    }
 
  unselect();
}

byte SPItransfer(byte WrPara)
{
byte Data_In = 0;
byte bitcnt;   

Output_Low(SCK);
 for(bitcnt=8; bitcnt!=0; bitcnt--)
    {
    Output_Low(SCK);
    if(WrPara&0x80)
       Output_High(SerOut);   // RFM69 SDI 
    else
       Output_Low(SerOut);   
    Output_High(SCK);
    if (Input(SerIn))
      Data_In |= 1;
    WrPara <<= 1;
    delay_cycles(1);
    }
Output_Low(SCK);
Output_High(SerOut);
return(Data_In);
}


byte SPIRead8bit(void)
{
byte RdPara = 0;
byte bitcnt;
Output_High(SerOut);   // RFM69 SDI                                                                          //Read one byte data from FIFO, MOSI hold to High 
 for(bitcnt=8; bitcnt!=0; bitcnt--)
    {
    Output_Low(SCK);
    RdPara <<= 1;
    Output_High(SCK);
    if(Input(SerIn))
       RdPara |= 0x01;
    else
       delay_cycles(1); 
    }
 Output_Low(SCK);   
 return(RdPara);
}

int16 readRSSI(short forceTrigger)
{
  int16 rssi = 0;
  if (forceTrigger)
  {
    // RSSI trigger not needed if DAGC is in continuous mode
    writeReg(REG_RSSICONFIG, RF_RSSI_START);
    while ((readReg(REG_RSSICONFIG) & RF_RSSI_DONE) == 0x00); // wait for RSSI_Ready
  }
  rssi = -readReg(REG_RSSIVALUE);
  rssi >>= 1;
  return rssi;
}

// internal function
void setHighPowerRegs(short onOff) {
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
}

